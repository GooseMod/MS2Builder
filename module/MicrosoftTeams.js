parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"index.js":[function(require,module,exports) {
// Generated by MS2Builder - genericTheme preprocessor / porter
  let style;
  
  export default {
    goosemodHandlers: {
      onImport: async () => {
        style = document.createElement("style");
        document.head.appendChild(style);
        style.appendChild(
          document.createTextNode(
            `/* 
░▒█▀▄▀█░░▀░░█▀▄░█▀▀▄░▄▀▀▄░█▀▀░▄▀▀▄░█▀▀░▀█▀░░░▀▀█▀▀░█▀▀░█▀▀▄░█▀▄▀█░█▀▀
░▒█▒█▒█░░█▀░█░░░█▄▄▀░█░░█░▀▀▄░█░░█░█▀░░░█░░░░░▒█░░░█▀▀░█▄▄█░█░▀░█░▀▀▄
░▒█░░▒█░▀▀▀░▀▀▀░▀░▀▀░░▀▀░░▀▀▀░░▀▀░░▀░░░░▀░░░░░▒█░░░▀▀▀░▀░░▀░▀░░▒▀░▀▀▀

░▒█▀▀▄░▒█░░▒█░░░▒█░░░░▒█▀▀▀░▒█▀▀▀░▒█▀▀█░▒█▀▀▄░▒█░▄▀░▒█░░▒█
░▒█▀▀▄░▒▀▄▄▄▀░░░▒█░░░░▒█▀▀▀░▒█▀▀▀░▒█▄▄█░▒█▄▄▀░▒█▀▄░░▒▀▄▄▄▀
░▒█▄▄█░░░▒█░░░░░▒█▄▄█░▒█▄▄▄░▒█▄▄▄░▒█░░░░▒█░▒█░▒█░▒█░░░▒█░░
*/

/*
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█▄ ▄██ ▄▀▄ ██ ▄▄ ██ ▄▄▄ ██ ▄▄▀█▄▄ ▄▄
██ ███ █ █ ██ ▀▀ ██ ███ ██ ▀▀▄███ ██
█▀ ▀██ ███ ██ █████ ▀▀▀ ██ ██ ███ ██
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
*/

@import "https://leeprky.github.io/themes/MicrosoftTeams/master-import.css";
@import "https://leeprky.github.io/themes/MicrosoftTeams/source/client/powercord/powercord.css";

/*
░▒█▀▀▄░▒█░▒█░▒█▀▀▀█░▀▀█▀▀░▒█▀▀▀█░▒█▀▄▀█░▀█▀░▒█▀▀▀█░█▀▀▄░▀▀█▀▀░▀█▀░▒█▀▀▀█░▒█▄░▒█
░▒█░░░░▒█░▒█░░▀▀▀▄▄░░▒█░░░▒█░░▒█░▒█▒█▒█░▒█░░░▀▀▀▄▄▒█▄▄█░░▒█░░░▒█░░▒█░░▒█░▒█▒█▒█
░▒█▄▄▀░░▀▄▄▀░▒█▄▄▄█░░▒█░░░▒█▄▄▄█░▒█░░▒█░▄█▄░▒█▄▄▄█▒█░▒█░░▒█░░░▄█▄░▒█▄▄▄█░▒█░░▀█
*/

/*
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
██ ▄▄ ██ ████ ▄▄▀██ ▄▄▄ ██ ▄▄▄ ██ ▄▄▀██ ▄▄▄ ██ ▄▄▀██ ▄▄▀
██ █▀▀██ ████ ▀▀ ██▄▄▄▀▀██▄▄▄▀▀██ █████ ███ ██ ▀▀▄██ ██ 
██ ▀▀▄██ ▀▀ █ ██ ██ ▀▀▀ ██ ▀▀▀ ██ ▀▀▄██ ▀▀▀ ██ ██ ██ ▀▀ 
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
*/

/*
@import "https://leeprky.github.io/themes/MicrosoftTeams/source/glasscord/glasscord-source.css";

:root{
	--glasscord-win-blur: blurbehind;
	--glasscord-macos-vibrancy: fullscreen-ui;
	--glasscord-linux-blur: true;
	--glasscord-blur-corner-radius: 20px;
	--glasscord-titlebar: default;

  --glasscord-background: #1f1f1fc0 !important;
  --glasscord-floating: #1f1f20ea !important;  
}

/*
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
██ ▄▄▄ ██ ▄▄▀██ ██ ██ ▄▄▄██ ▄▀▄ ██ ▄▄▄██ ▄▄▄ 
██▄▄▄▀▀██ █████ ▄▄ ██ ▄▄▄██ █ █ ██ ▄▄▄██▄▄▄▀▀
██ ▀▀▀ ██ ▀▀▄██ ██ ██ ▀▀▀██ ███ ██ ▀▀▀██ ▀▀▀ 
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
these schemes are to be used standalone - so disadle all other imports!!!
*/

/* Spicetify Default Theme */
@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/schemes/spicetify-default.css";

/* */
/* Based On Other Themes */
/* Ovel */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/schemes/ovel-scheme.css";

/* Lode */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/schemes/lode-scheme.css";

/* Naive */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/schemes/naive-scheme.css";

/* Slook */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/schemes/slook-scheme.css";

/* Linix Mint */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/schemes/linix-mint-scheme.css";

/* Couve */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/schemes/couve-scheme.css";

/* Duvbox */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/schemes/duvbox-scheme.css";
*/
/* 


/*
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
██ ▄▄▀██ ▄▄▄ ██ █████ ▄▄▄ ██ ██ ██ ▄▄▀██ ▄▄▄ 
██ █████ ███ ██ █████ ███ ██ ██ ██ ▀▀▄██▄▄▄▀▀
██ ▀▀▄██ ▀▀▀ ██ ▀▀ ██ ▀▀▀ ██▄▀▀▄██ ██ ██ ▀▀▀ 
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
*/

/* - GREEN */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/green.css";

/* - PINK */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/pink.css";

/* - BLUE */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/blue.css";

/* - ORANGE */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/orange.css";

/* - YELLOW */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/yellow.css";

/* - RED */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/red.css";

/* - CYAN */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/cyan.css";

/* - PLUM */
/* @import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/plum.css";

/* - BROWN */
/*@import "https://leeprky.github.io/themes/MicrosoftTeams/source/themes/brown,.css";


/*
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█▄▄ ▄▄██ ▄▄▄ ██ ▄▄ ██ ▄▄▀█ ▄▄▀██ ▄▄▀
███ ████ ███ ██ ▀▀ ██ ▄▄▀█ ▀▀ ██ ▀▀▄
███ ████ ▀▀▀ ██ █████ ▀▀ █ ██ ██ ██ 
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
remove the /* remove above the import (have none of the options above toggled) and choice between custom or preset schemes..
*/

/*
@import "https://leeprky.github.io/themes/MicrosoftTeams/source/TopBar/main.css";
:root {
  --speed: 16s !important 
}

/* Ocean Scheme */
/* REMOVE
:root { 
  --topbar-animation-colour: 124deg, #22577A, #38A3A5, #57CC99, #80ed99, #c7f9cc;
}

/* Fading Red Scheme */
/* REMOVE
:root { 
  --topbar-animation-colour: 124deg, #800f2f, #a4133c, #c9184a, #ff4d6d, #ff8fa3, #ff4d6d, #c9184a, #a4133c;
}

/* Red To Blue Scheme */
/*
:root { 
  --topbar-animation-colour: 0deg, #b7094c, #a01a58, #892b64, #723c70, #5c4d7d,
                                   #455e89, #2e6f95, #1780a1, #0091ad, #1780a1,
                                   #2e6f95, #455e89, #5c4d7d, #723c70, #892b64,
                                   #a01a58, #b7094c;
}

/* CUSTOM COLOUR HERE */ /* DISABLE THE OCEAN PRESET TO ENABLE THIS */
/*  
 :root { 
  --topbar-animation-colour: 124deg, red, yellow, green, orange, purple, blue !important;
}

/*
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
██ ▄▄▀█ ▄▄▀██ ▄▄▀██ █▀▄███▄▄ ▄▄██ ██ ██ ▄▄▄██ ▄▀▄ ██ ▄▄▄
██ ██ █ ▀▀ ██ ▀▀▄██ ▄▀██████ ████ ▄▄ ██ ▄▄▄██ █ █ ██ ▄▄▄
██ ▀▀ █ ██ ██ ██ ██ ██ █████ ████ ██ ██ ▀▀▀██ ███ ██ ▀▀▀
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
*/

.theme-dark {

  /* Main Colours - Try Keep These The Same */
  --main-colour: 70, 71, 117; /* RGB ONLY */
  --main-colour2: #464775; /* HEX ONLY */
  --main-colour3: 239; /* HSL ONLY */

  /* Green Colours */
  --green-color: var(--alt-color2); /* HEX ONLY */
  --green-color2: var(--alt-color); /* RGB ONLY */
  --green-bar-on: rgba(var(--alt-color), 0.3); /* RGBA ONLY */
  --green-bar-bg: var(--green-color); /* RGB ONLY */
  --green-slider-on: var(--green-color); /* RGB ONLY */
  --green-slider-off: rgba(var(--alt-color), 0.4); /* RGBA ONLY */
  --green-slider-dot: #fff;

  /* Status/Other Things Colours */
  --purple: #464775;
  --red: #B1273E;
  --call-button-red: #AF243D;
  --yellow: #FDB913;
  --green: #92C353;

  /* Header Colours */
  --headers: #FFFFFF; /* */
  --headers-secondary: #c7c7c7;

  --chatbox-colour: var(--background-secondary);
  --messages-colour: #333333;
  --mentioned: rgba(var(--alt-color), 0.4);
  --mentioned-hover: rgba(var(--alt-color), 0.2);

  /* Text Colours */
  --namesusernames: #F0F0F0;
  --text: #F0F0F0;
  --text-positive1: var(--green-color);
  --muted: #646262;
  --links: var(--alt-color2);
  --links-from-self: #989bff;
  
  /* Interative Buttons */
  --button-interactive: #F0F0F0;
  --button-interactive-hover: #F0F0F0;
  --button-interactive-active: #fefeff;
  --button-interactive-muted: #585858;

  /* Backgrounds */
  --main-background: #1f1f1f;
  --main-background-alternative: #111111;
  --secondary-background: #141414;
  --secondary-background-alternative: #0a0a0a;
  --tertiary: #171717;
  --accent: var(--alt-color2);
  --floating: #161616;

  /* Hovering Colours */
  --main-hover: rgba(var(--alt-color), 0.2);
  --main-hover-active: rgba(var(--alt-color), 0.8);
  --main-hover-selected: rgba(var(--alt-color), 0.5); 
  --main-hover-accent: rgba(var(--alt-color), 0.1); 

  /* Channel Indicators */
  --connected: 108, 95, 135; /* RGB ONLY */
  --hovered: rgba(var(--alt-color), 0.2); /* RGBA ONLY */
  --unread: 255, 255, 255; /* RGB ONLY */
  --selected: var(--alt-color); /* RGB ONLY */
  --rounding: 3px;

  /* Infos */
  --info-warning: var(--red);
  --help-warning: var(--red);
  --help-info: var(--alt-color2);
  --radio-group-dot: var(--alt-color);

  /* Drop Shadow */
  --shadow-stroke: 0 0 0 1px rgba(4,4,5,0.15);
  --shadow-low: 0 1px 0 rgba(18, 20, 36, 0.767),0 1.5px 0 rgba(6,6,7,0.05),0 2px 0 rgba(4,4,5,0.05);
  --shadow-medium: 0 4px 4px rgba(0,0,0,0.16);
  --shadow-high: 0 8px 16px rgba(0,0,0,0.24);

  /* Scollbars */
  --scrollbars: flex; /* Flex To See Scrollbars / None For None */
  --scrollbar-small: #797979;
  --scrollbar-small-track: transparent;
  --scrollbar-large-thumb: #797979;
  --scrollbar-large-track: transparent;
  --scrollbar-small-scrollbar-color: #6c6c6c;
  --scrollbar-small-scrollbar-color-track: transparent;

  /* Button Gradients */
  --default-gradient: 315deg, rgba(var(--alt-color), 0.6) 0%, rgba(var(--alt-color), 0.8) 74%;
  --special-gradient: 315deg, rgba(var(--alt-color), 0.1) 0%, #c987b8 74%;
  --red-gradient: 315deg, #AA3738 0%, #F04747 74%;
  --red-hsl: hsl(359, 63%, 53%);
  --yellow-gradient: 315deg, #c29b1b 0%, #ffa640 74%;
  --yellow-hsl: hsl(46, 72%, 52%);
  --green-gradient: 315deg, #507a73 0%, #4b7c72  74%;
  --grey-gradient: 315deg, rgba(var(--alt-color), 0.6) 0%, rgba(var(--alt-color), 0.8) 74%;
  --white-gradient: 315deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.342) 74%;
  --font-normal: 500;
  --font-hover: bold;
  --font-size-hover: 15px;
  --hover-transition: 0.1s linear;
  --transform-normal: scale(1);
  --hover-transform: scale(1.15);
  --setting-hover-transform: scale(1.025);
  --button-hover-transform: scale(1.03);

  /* Others */

  /* Modals */
  --user-modal-avatar-size: 230px;
  --blur-the-things: 0;
  --premium-size: 480px;
  --premium-opacity: .13;
  --premium-blur: blur(1.2px)
}


/*
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
██ ██ █▄ ▄██ ▄▄ ██ ██ ████ ▄▄▀██ ▄▄▄ ██ ▀██ █▄▄ ▄▄██ ▄▄▀█ ▄▄▀██ ▄▄▄ █▄▄ ▄▄
██ ▄▄ ██ ███ █▀▀██ ▄▄ ████ █████ ███ ██ █ █ ███ ████ ▀▀▄█ ▀▀ ██▄▄▄▀▀███ ██
██ ██ █▀ ▀██ ▀▀▄██ ██ ████ ▀▀▄██ ▀▀▀ ██ ██▄ ███ ████ ██ █ ██ ██ ▀▀▀ ███ ██
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
*/

/* work in progress */

/*
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
██ ████▄ ▄██ ▄▄ ██ ██ █▄▄ ▄▄███▄▄ ▄▄██ ██ ██ ▄▄▄██ ▄▀▄ ██ ▄▄▄
██ █████ ███ █▀▀██ ▄▄ ███ ███████ ████ ▄▄ ██ ▄▄▄██ █ █ ██ ▄▄▄
██ ▀▀ █▀ ▀██ ▀▀▄██ ██ ███ ███████ ████ ██ ██ ▀▀▀██ ███ ██ ▀▀▀
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
*/

.theme-light {

  /* Main Colours - Try Keep These The Same */
  --main-colour: 118, 120, 187; /* RGB ONLY */
  --main-colour2: #6e71bb; /* HEX ONLY */
  --main-colour3: 238; /* HSL ONLY */

  /* Green Colours */
  --green-color: var(--alt-color2); /* HEX ONLY */
  --green-color2: var(--alt-color); /* RGB ONLY */
  --green-bar-on: rgba(var(--alt-color), 0.3); /* RGBA ONLY */
  --green-bar-bg: var(--green-color); /* RGB ONLY */
  --green-slider-on: var(--green-color); /* RGB ONLY */
  --green-slider-off: rgba(var(--alt-color), 0.4); /* RGBA ONLY */
  --green-slider-dot: #fff;

  /* Status/Other Things Colours */
  --purple: #464775;
  --red: #B1273E;
  --call-button-red: #AF243D;
  --yellow: #FDB913;
  --green: #92C353;

  /* Header Colours */
  --headers: #1A1A1A; /* */
  --headers-secondary: #5E5D5F;

  --chatbox-colour: var(--background-secondary);
  --messages-colour: #e9e9e9;
  --mentioned: rgba(var(--alt-color), 0.4);
  --mentioned-hover: rgba(var(--alt-color), 0.2);

  /* Text Colours */
  --namesusernames: #2e2e2e;
  --text: #3E3E3E;
  --text-positive1: var(--green-color);
  --muted: #252525;
  --links: var(--alt-color2);
  --links-from-self: #6365a1;
  
  /* Interative Buttons */
  --button-interactive: #555555;
  --button-interactive-hover: var(--alt-color2);
  --button-interactive-active: var(--alt-color2);
  --button-interactive-muted: #989898;

  /* Backgrounds */
  --main-background: #F3F3F3; 
  --main-background-alternative: #F3F3F3; 
  --secondary-background: #EBEBEB; 
  --secondary-background-alternative: #EBEBEB; 
  --tertiary: rgba(253, 251, 251, 0.979); 
  --accent: var(--alt-color2);
  --floating: #ffffff; 

  /* Hovering Colours */
  --main-hover: rgba(var(--alt-color), 0.2) ;
  --main-hover-active: rgba(var(--alt-color), 0.6) ;
  --main-hover-selected: rgba(var(--alt-color), 0.4) ; 
  --main-hover-accent: rgba(var(--alt-color), 0.1) ; 

  /* Channel Indicators */
  --connected: 108, 95, 135; /* RGB ONLY */
  --hovered: rgba(var(--alt-color), 0.1); /* RGBA ONLY */
  --unread: 255, 255, 255; /* RGB ONLY */
  --selected: var(--alt-color); /* RGB ONLY */
  --rounding: 3px;

  /* Infos */
  --info-warning: var(--red);
  --help-warning: var(--red);
  --help-info: var(--alt-color2);
  --radio-group-dot: var(--alt-color);

  /* Drop Shadow */
  --shadow-stroke: 0 0 0 1px rgba(4,4,5,0.15) ;
  --shadow-low: 0 1px 0 rgba(18, 20, 36, 0.767),0 1.5px 0 rgba(6,6,7,0.05),0 2px 0 rgba(4,4,5,0.05) ;
  --shadow-medium: 0 4px 4px rgba(0,0,0,0.16) ;
  --shadow-high: 0 8px 16px rgba(0,0,0,0.24) ;

  /* Scollbars */
  --scrollbars: flex;
  --scrollbar-small: #8A8A8A ;
  --scrollbar-small-track: transparent;
  --scrollbar-large-thumb: #8A8A8A;
  --scrollbar-large-track: transparent;
  --scrollbar-small-scrollbar-color: #6c6c6c;
  --scrollbar-small-scrollbar-color-track: transparent;

  /* Button Gradients */
  --default-gradient: 315deg, rgba(var(--alt-color), 0.6) 0%, rgba(var(--alt-color), 0.8) 74%;
  --special-gradient: 315deg, rgba(var(--alt-color), 0.1) 0%, #c987b8 74%;
  --red-gradient: 315deg, #AA3738 0%, #F04747 74%;
  --red-hsl: hsl(359, 63%, 53%);
  --yellow-gradient: 315deg, #c29b1b 0%, #ffa640 74%;
  --yellow-hsl: hsl(46, 72%, 52%);
  --green-gradient: 315deg, #507a73 0%, #4b7c72  74%;
  --grey-gradient: 315deg, rgba(var(--alt-color), 0.6) 0%, rgba(var(--alt-color), 0.8) 74%;
  --white-gradient: 315deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.342) 74%;
  --font-normal: 500;
  --font-hover: bold;
  --font-size-hover: 15px;
  --hover-transition: 0.1s linear;
  --transform-normal: scale(1);
  --hover-transform: scale(1.15);
  --setting-hover-transform: scale(1.025);
  --button-hover-transform: scale(1.03);

  /* Others */
  

  /* Modals */
  --user-modal-avatar-size: 230px;
  --blur-the-things: 0px;
  --premium-size: 480px;
  --premium-opacity: .13;
  --premium-blur: blur(1.2px)
}

/*
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
██ ███ ██ ▄▄▄██ ▄▄▀██ ▄▄▄ █▄ ▄██ ▄▄▄ ██ ▀██ 
███ █ ███ ▄▄▄██ ▀▀▄██▄▄▄▀▀██ ███ ███ ██ █ █ 
███▄▀▄███ ▀▀▀██ ██ ██ ▀▀▀ █▀ ▀██ ▀▀▀ ██ ██▄ 
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
*/

:root {--outdated_msteams-007: none !important; --version: "0.1.1PC (ALPHA)" !important; --build: "007" !important}
`
          )
        );
  
        if (false || (goosemodScope.settings.gmSettings.get().allThemeSettings)) goosemodScope.settings.createItem('MicrosoftTeams', [
          '',
  
          {
            type: 'text-and-color',
            text: 'Topbar Animation Colour',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--topbar-animation-colour', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--topbar-animation-colour`) || `124deg, #22577A, #38A3A5, #57CC99, #80ed99, #c7f9cc`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Main Colour',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--main-colour', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--main-colour`) || `70, 71, 117`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Main Colour2',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--main-colour2', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--main-colour2`) || `#464775`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Main Colour3',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--main-colour3', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--main-colour3`) || `239`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Green Slider Dot',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--green-slider-dot', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--green-slider-dot`) || `#fff`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Purple',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--purple', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--purple`) || `#464775`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Red',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--red', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--red`) || `#B1273E`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Call Button Red',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--call-button-red', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--call-button-red`) || `#AF243D`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Yellow',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--yellow', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--yellow`) || `#FDB913`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Green',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--green', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--green`) || `#92C353`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Headers',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--headers', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--headers`) || `#FFFFFF`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Headers Secondary',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--headers-secondary', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--headers-secondary`) || `#c7c7c7`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Messages Colour',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--messages-colour', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--messages-colour`) || `#333333`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Namesusernames',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--namesusernames', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--namesusernames`) || `#F0F0F0`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Text',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--text', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--text`) || `#F0F0F0`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Muted',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--muted', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--muted`) || `#646262`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Links From Self',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--links-from-self', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--links-from-self`) || `#989bff`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Button Interactive',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--button-interactive', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--button-interactive`) || `#F0F0F0`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Button Interactive Hover',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--button-interactive-hover', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--button-interactive-hover`) || `#F0F0F0`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Button Interactive Active',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--button-interactive-active', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--button-interactive-active`) || `#fefeff`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Button Interactive Muted',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--button-interactive-muted', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--button-interactive-muted`) || `#585858`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Main Background',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--main-background', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--main-background`) || `#1f1f1f`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Main Background Alternative',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--main-background-alternative', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--main-background-alternative`) || `#111111`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Secondary Background',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--secondary-background', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--secondary-background`) || `#141414`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Secondary Background Alternative',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--secondary-background-alternative', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--secondary-background-alternative`) || `#0a0a0a`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Tertiary',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--tertiary', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--tertiary`) || `#171717`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Floating',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--floating', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--floating`) || `#161616`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Connected',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--connected', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--connected`) || `108, 95, 135`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Unread',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--unread', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--unread`) || `255, 255, 255`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Rounding',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--rounding', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--rounding`) || `3px`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Shadow Stroke',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--shadow-stroke', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--shadow-stroke`) || `0 0 0 1px rgba(4,4,5,0.15)`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Shadow Low',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--shadow-low', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--shadow-low`) || `0 1px 0 rgba(18, 20, 36, 0.767),0 1.5px 0 rgba(6,6,7,0.05),0 2px 0 rgba(4,4,5,0.05)`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Shadow Medium',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--shadow-medium', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--shadow-medium`) || `0 4px 4px rgba(0,0,0,0.16)`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Shadow High',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--shadow-high', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--shadow-high`) || `0 8px 16px rgba(0,0,0,0.24)`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Scrollbars',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--scrollbars', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--scrollbars`) || `flex`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Scrollbar Small',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--scrollbar-small', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--scrollbar-small`) || `#797979`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Scrollbar Small Track',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--scrollbar-small-track', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--scrollbar-small-track`) || `transparent`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Scrollbar Large Thumb',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--scrollbar-large-thumb', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--scrollbar-large-thumb`) || `#797979`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Scrollbar Large Track',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--scrollbar-large-track', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--scrollbar-large-track`) || `transparent`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Scrollbar Small Scrollbar Color',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--scrollbar-small-scrollbar-color', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--scrollbar-small-scrollbar-color`) || `#6c6c6c`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Scrollbar Small Scrollbar Color Track',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--scrollbar-small-scrollbar-color-track', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--scrollbar-small-scrollbar-color-track`) || `transparent`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Red Gradient',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--red-gradient', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--red-gradient`) || `315deg, #AA3738 0%, #F04747 74%`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Red Hsl',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--red-hsl', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--red-hsl`) || `hsl(359, 63%, 53%)`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Yellow Gradient',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--yellow-gradient', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--yellow-gradient`) || `315deg, #c29b1b 0%, #ffa640 74%`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Yellow Hsl',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--yellow-hsl', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--yellow-hsl`) || `hsl(46, 72%, 52%)`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'Green Gradient',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--green-gradient', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--green-gradient`) || `315deg, #507a73 0%, #4b7c72  74%`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-and-color',
            text: 'White Gradient',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--white-gradient', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--white-gradient`) || `315deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.342) 74%`;
              if (val[0] !== '#') { val = '#' + val.split(', ').map((x) => parseInt(x).toString(16).padStart(2, '0')).join(''); }
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Font Normal',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--font-normal', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--font-normal`) || `500`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Font Hover',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--font-hover', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--font-hover`) || `bold`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Font Size Hover',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--font-size-hover', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--font-size-hover`) || `15px`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Hover Transition',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--hover-transition', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--hover-transition`) || `0.1s linear`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Transform Normal',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--transform-normal', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--transform-normal`) || `scale(1)`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Hover Transform',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--hover-transform', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--hover-transform`) || `scale(1.15)`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Setting Hover Transform',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--setting-hover-transform', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--setting-hover-transform`) || `scale(1.025)`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Button Hover Transform',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--button-hover-transform', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--button-hover-transform`) || `scale(1.03)`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'User Modal Avatar Size',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--user-modal-avatar-size', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--user-modal-avatar-size`) || `230px`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Blur The Things',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--blur-the-things', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--blur-the-things`) || `0`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Premium Size',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--premium-size', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--premium-size`) || `480px`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Premium Opacity',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--premium-opacity', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--premium-opacity`) || `.13`;
              
  
              console.log(val);
  
              return val;
            }
          }, {
            type: 'text-input',
            text: 'Outdated_msteams 007',
  
            oninput: (val) => {
              
  
              document.body.style.setProperty('--outdated_msteams-007', val);
            },
            initialValue: () => {
              let val = document.body.style.getPropertyValue(`--outdated_msteams-007`) || `none; --version: "0.1.1PC (ALPHA)" !important`;
              
  
              console.log(val);
  
              return val;
            }
          }
        ])
      },
    
      onRemove: async () => {
        style.remove();
  
        try {
          goosemodScope.settings.removeItem('MicrosoftTeams');
        } catch (e) { }
      },
  
      getSettings: async () => [['--topbar-animation-colour', document.body.style.getPropertyValue(`--topbar-animation-colour`)], ['--main-colour', document.body.style.getPropertyValue(`--main-colour`)], ['--main-colour2', document.body.style.getPropertyValue(`--main-colour2`)], ['--main-colour3', document.body.style.getPropertyValue(`--main-colour3`)], ['--green-slider-dot', document.body.style.getPropertyValue(`--green-slider-dot`)], ['--purple', document.body.style.getPropertyValue(`--purple`)], ['--red', document.body.style.getPropertyValue(`--red`)], ['--call-button-red', document.body.style.getPropertyValue(`--call-button-red`)], ['--yellow', document.body.style.getPropertyValue(`--yellow`)], ['--green', document.body.style.getPropertyValue(`--green`)], ['--headers', document.body.style.getPropertyValue(`--headers`)], ['--headers-secondary', document.body.style.getPropertyValue(`--headers-secondary`)], ['--messages-colour', document.body.style.getPropertyValue(`--messages-colour`)], ['--namesusernames', document.body.style.getPropertyValue(`--namesusernames`)], ['--text', document.body.style.getPropertyValue(`--text`)], ['--muted', document.body.style.getPropertyValue(`--muted`)], ['--links-from-self', document.body.style.getPropertyValue(`--links-from-self`)], ['--button-interactive', document.body.style.getPropertyValue(`--button-interactive`)], ['--button-interactive-hover', document.body.style.getPropertyValue(`--button-interactive-hover`)], ['--button-interactive-active', document.body.style.getPropertyValue(`--button-interactive-active`)], ['--button-interactive-muted', document.body.style.getPropertyValue(`--button-interactive-muted`)], ['--main-background', document.body.style.getPropertyValue(`--main-background`)], ['--main-background-alternative', document.body.style.getPropertyValue(`--main-background-alternative`)], ['--secondary-background', document.body.style.getPropertyValue(`--secondary-background`)], ['--secondary-background-alternative', document.body.style.getPropertyValue(`--secondary-background-alternative`)], ['--tertiary', document.body.style.getPropertyValue(`--tertiary`)], ['--floating', document.body.style.getPropertyValue(`--floating`)], ['--connected', document.body.style.getPropertyValue(`--connected`)], ['--unread', document.body.style.getPropertyValue(`--unread`)], ['--rounding', document.body.style.getPropertyValue(`--rounding`)], ['--shadow-stroke', document.body.style.getPropertyValue(`--shadow-stroke`)], ['--shadow-low', document.body.style.getPropertyValue(`--shadow-low`)], ['--shadow-medium', document.body.style.getPropertyValue(`--shadow-medium`)], ['--shadow-high', document.body.style.getPropertyValue(`--shadow-high`)], ['--scrollbars', document.body.style.getPropertyValue(`--scrollbars`)], ['--scrollbar-small', document.body.style.getPropertyValue(`--scrollbar-small`)], ['--scrollbar-small-track', document.body.style.getPropertyValue(`--scrollbar-small-track`)], ['--scrollbar-large-thumb', document.body.style.getPropertyValue(`--scrollbar-large-thumb`)], ['--scrollbar-large-track', document.body.style.getPropertyValue(`--scrollbar-large-track`)], ['--scrollbar-small-scrollbar-color', document.body.style.getPropertyValue(`--scrollbar-small-scrollbar-color`)], ['--scrollbar-small-scrollbar-color-track', document.body.style.getPropertyValue(`--scrollbar-small-scrollbar-color-track`)], ['--red-gradient', document.body.style.getPropertyValue(`--red-gradient`)], ['--red-hsl', document.body.style.getPropertyValue(`--red-hsl`)], ['--yellow-gradient', document.body.style.getPropertyValue(`--yellow-gradient`)], ['--yellow-hsl', document.body.style.getPropertyValue(`--yellow-hsl`)], ['--green-gradient', document.body.style.getPropertyValue(`--green-gradient`)], ['--white-gradient', document.body.style.getPropertyValue(`--white-gradient`)], ['--font-normal', document.body.style.getPropertyValue(`--font-normal`)], ['--font-hover', document.body.style.getPropertyValue(`--font-hover`)], ['--font-size-hover', document.body.style.getPropertyValue(`--font-size-hover`)], ['--hover-transition', document.body.style.getPropertyValue(`--hover-transition`)], ['--transform-normal', document.body.style.getPropertyValue(`--transform-normal`)], ['--hover-transform', document.body.style.getPropertyValue(`--hover-transform`)], ['--setting-hover-transform', document.body.style.getPropertyValue(`--setting-hover-transform`)], ['--button-hover-transform', document.body.style.getPropertyValue(`--button-hover-transform`)], ['--user-modal-avatar-size', document.body.style.getPropertyValue(`--user-modal-avatar-size`)], ['--blur-the-things', document.body.style.getPropertyValue(`--blur-the-things`)], ['--premium-size', document.body.style.getPropertyValue(`--premium-size`)], ['--premium-opacity', document.body.style.getPropertyValue(`--premium-opacity`)], ['--outdated_msteams-007', document.body.style.getPropertyValue(`--outdated_msteams-007`)]],
      loadSettings: async (settings) => {
        settings.forEach((x) => {
          document.body.style.setProperty(x[0], x[1]);
        });
      }
    }
  };
},{}]},{},["index.js"], null);parcelRequire('index.js').default